generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  osuId     Int    @unique
  discordId String @unique
  username  String
  balance   Int    @default(0)

  credentials OAuthCredentials?

  // Owner relations
  ownedTournaments Tournament[]
  ownedTryouts     Tryout[]
  ownedTeams       Team[]

  // Player relations
  tryouts       PlayersOnTryouts[]
  tryoutLobbies PlayersOnTryoutLobbies[]
  teams         PlayersOnTeams[]

  // Referee relations
  claimedMatches       Match[]
  claimedTryoutLobbies TryoutLobby[]

  // should probably save data returned from osu api here

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("users")
}

model OAuthCredentials {
  id           Int      @id @default(autoincrement())
  accessToken  String   @db.VarChar(1024)
  refreshToken String   @db.VarChar(1024)
  expiresAt    DateTime
  scope        String
  tokenType    String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("oauth_credentials")
}

model OAuthState {
  id        Int     @id @default(autoincrement())
  state     String  @unique
  discordId String
  messageId String
  fulfilled Boolean @default(false)

  expiresAt DateTime @db.Timestamp(6)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("oauth_state")
}

model Tournament {
  id                  String   @id
  name                String
  acronym             String
  serverId            String
  startDate           DateTime @db.Timestamp(6)
  registrationEndDate DateTime @db.Timestamp(6)
  staffChannelId      String
  mappolerChannelId   String
  refereeChannelId    String
  scheduleChannelId   String
  playerChannelId     String
  staffRoleId         String
  mappolerRoleId      String
  refereeRoleId       String
  playerRoleId        String
  teamSize            Int
  lobbyTeamSize       Int
  // maybe add an isJoinable field?

  winCondition WinCondition
  scoring      ScoringType
  type         TournamentType

  matches Match[]
  teams   TeamsOnTournaments[]

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("tournaments")
}

model Match {
  id       String          @id
  customId String
  schedule DateTime        @db.Timestamp(6)
  mpLink   String?
  status   MatchStatus     @default(Pending)
  stage    TournamentStage

  referee   User? @relation(fields: [refereeId], references: [id])
  refereeId Int?

  // scores maybe?

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String

  teams MatchesOnTeams[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("matches")
}

model Team {
  id            String @id
  name          String
  idealTimezone String

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  players PlayersOnTeams[]

  tournaments TeamsOnTournaments[]
  matches     MatchesOnTeams[]

  onePlayerTeam Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("teams")
}

model TeamsOnTournaments {
  tournamentId String
  teamId       String

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  team       Team       @relation(fields: [teamId], references: [id])

  @@id([tournamentId, teamId])
  @@map("teams_on_tournaments")
}

model MatchesOnTeams {
  matchId String
  teamId  String

  match Match @relation(fields: [matchId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])

  assignedAt DateTime @default(now())

  @@id([matchId, teamId])
  @@map("matches_on_teams")
}

model Tryout {
  id                String  @id
  name              String
  staffChannelId    String
  scheduleChannelId String
  playerChannelId   String
  publicChannelId   String
  staffRoleId       String
  playerRoleId      String
  serverId          String
  isJoinable        Boolean

  stages  TryoutStage[]
  owner   User          @relation(fields: [ownerId], references: [id])
  ownerId Int

  players PlayersOnTryouts[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("tryouts")
}

model TryoutStage {
  id       String @id
  name     String
  customId String

  tryout   Tryout @relation(fields: [tryoutId], references: [id])
  tryoutId String

  lobbies TryoutLobby[]

  // mappool maybe?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("tryout_stages")
}

model TryoutLobby {
  id          String   @id
  customId    String
  playerLimit Int
  startDate   DateTime @db.Timestamp(6)

  stage   TryoutStage @relation(fields: [stageId], references: [id])
  stageId String

  referee   User? @relation(fields: [refereeId], references: [id])
  refereeId Int?

  players PlayersOnTryoutLobbies[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("tryout_lobbies")
}

model PlayersOnTryoutLobbies {
  tryoutLobbyId String
  userId        Int

  tryoutLobby TryoutLobby @relation(fields: [tryoutLobbyId], references: [id])
  player      User        @relation(fields: [userId], references: [id])

  @@id([tryoutLobbyId, userId])
  @@map("players_to_tryout_lobbies")
}

model PlayersOnTryouts {
  tryoutId String
  userId   Int

  tryout Tryout @relation(fields: [tryoutId], references: [id])
  player User   @relation(fields: [userId], references: [id])

  @@id([tryoutId, userId])
  @@map("players_to_tryouts")
}

model PlayersOnTeams {
  teamId String
  userId Int

  team   Team @relation(fields: [teamId], references: [id])
  player User @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@map("players_to_teams")
}

enum MatchStatus {
  Pending
  Ongoing
  Completed

  @@map("match_status")
}

enum TournamentStage {
  Groups
  RoundOf256
  RoundOf128
  RoundOf64
  RoundOf32
  RoundOf16
  Quarterfinals
  Semifinals
  Finals
  GrandFinals

  @@map("tournament_stage")
}

enum WinCondition {
  Accuracy
  MissCount
  Score

  @@map("win_condition")
}

enum ScoringType {
  ScoreV1
  ScoreV2

  @@map("scoring_type")
}

enum TournamentType {
  BattleRoyale
  OneVsOne
  TeamBased
  Tryouts
  Custom

  @@map("tournament_type")
}
